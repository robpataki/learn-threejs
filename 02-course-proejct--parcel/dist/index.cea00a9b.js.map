{"mappings":"AAAA,MAAM,WACN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkHC","sources":["js/app.js"],"sourcesContent":["alert(\"hello!\");\n/* import * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\n\nimport fragment from \"./shader/fragment.glsl\";\nimport vertex from \"./shader/vertex.glsl\";\nimport * as dat from \"dat.gui\";\nimport gsap from \"gsap\";\n\n\nexport default class Sketch {\n  constructor(options) {\n    this.scene = new THREE.Scene();\n\n    this.container = options.dom;\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    this.renderer.setSize(this.width, this.height);\n    this.renderer.setClearColor(0xeeeeee, 1); \n\n    this.container.appendChild(this.renderer.domElement);\n\n    this.camera = new THREE.PerspectiveCamera(\n      70,\n      window.innerWidth / window.innerHeight,\n      0.001,\n      1000\n    );\n\n    // var frustumSize = 10;\n    // var aspect = window.innerWidth / window.innerHeight;\n    // this.camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, frustumSize * aspect / 2, frustumSize / 2, frustumSize / - 2, -1000, 1000 );\n    this.camera.position.set(0, 0, 2);\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.time = 0;\n\n    this.isPlaying = true;\n    \n    this.addObjects();\n    this.resize();\n    this.render();\n    this.setupResize();\n    // this.settings();\n  }\n\n  settings() {\n    let that = this;\n    this.settings = {\n      progress: 0,\n    };\n    this.gui = new dat.GUI();\n    this.gui.add(this.settings, \"progress\", 0, 1, 0.01);\n  }\n\n  setupResize() {\n    window.addEventListener(\"resize\", this.resize.bind(this));\n  }\n\n  resize() {\n    this.width = this.container.offsetWidth;\n    this.height = this.container.offsetHeight;\n    this.renderer.setSize(this.width, this.height);\n    this.camera.aspect = this.width / this.height;\n    this.camera.updateProjectionMatrix();\n  }\n\n  addObjects() {\n    let that = this;\n    this.material = new THREE.ShaderMaterial({\n      extensions: {\n        derivatives: \"#extension GL_OES_standard_derivatives : enable\"\n      },\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { value: 0 },\n        resolution: { value: new THREE.Vector4() },\n      },\n      // wireframe: true,\n      // transparent: true,\n      vertexShader: vertex,\n      fragmentShader: fragment\n    });\n\n    this.geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\n\n    this.plane = new THREE.Mesh(this.geometry, this.material);\n    this.scene.add(this.plane);\n  }\n\n  stop() {\n    this.isPlaying = false;\n  }\n\n  play() {\n    if(!this.isPlaying){\n      this.render()\n      this.isPlaying = true;\n    }\n  }\n\n  render() {\n    if (!this.isPlaying) return;\n    this.time += 0.05;\n    this.material.uniforms.time.value = this.time;\n    requestAnimationFrame(this.render.bind(this));\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nnew Sketch({\n  dom: document.getElementById(\"container\")\n});\n */\n"],"names":[],"version":3,"file":"index.cea00a9b.js.map","sourceRoot":"/__parcel_source_root/"}